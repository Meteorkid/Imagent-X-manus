name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: imagentx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('apps/backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      run: |
        cd apps/backend
        mvn test -DfailIfNoTests=false

    - name: Generate coverage report
      run: |
        cd apps/backend
        mvn jacoco:report

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'apps/frontend/package-lock.json'

    - name: Install dependencies
      run: |
        cd apps/frontend
        npm ci

    - name: Run tests
      run: |
        cd apps/frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Build frontend
      run: |
        cd apps/frontend
        npm run build

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        docker-compose -f working-docker-compose.yml build
        docker-compose -f working-docker-compose.yml up -d
        sleep 30
        curl -f http://localhost:3000 || exit 1
        curl -f http://localhost:8088/api/health || exit 1
        docker-compose -f working-docker-compose.yml down

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-backend.result }}" != "success" ]; then
          echo "❌ Backend tests failed"
          exit 1
        fi
        if [ "${{ needs.test-frontend.result }}" != "success" ]; then
          echo "❌ Frontend tests failed"
          exit 1
        fi
        if [ "${{ needs.docker-build.result }}" != "success" ]; then
          echo "❌ Docker build failed"
          exit 1
        fi
        echo "✅ All tests passed"
