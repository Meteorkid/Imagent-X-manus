version: '3.8'

networks:
  imagentx-network:
    driver: bridge
  sandbox-network:
    driver: bridge
    internal: true
  user-isolated-network:
    driver: bridge
    internal: true

volumes:
  postgres-data:
    driver: local
  rabbitmq-data:
    driver: local
  storage-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  sandbox-monitor-data:
    driver: local
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local

services:
  # ===== 原有服务（增强安全配置） =====
  
  # PostgreSQL 数据库
  postgres:
    image: docker.m.daocloud.io/postgres:15
    container_name: imagentx-postgres
    environment:
      POSTGRES_DB: imagentx
      POSTGRES_USER: imagentx_user
      POSTGRES_PASSWORD: imagentx_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docs/sql/00_install_pgvector.sql:/docker-entrypoint-initdb.d/00_install_pgvector.sql:ro
      - ./docs/sql/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - imagentx-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imagentx_user -d imagentx"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: imagentx-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - imagentx-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ImagentX 应用服务（沙箱增强）
  imagentx:
    image: ghcr.io/lucky-aeon/imagentx:latest
    container_name: imagentx-app
    environment:
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: imagentx
      DB_USER: imagentx_user
      DB_PASSWORD: imagentx_pass
      
      # 应用配置
      SERVER_PORT: 8088
      FRONTEND_PORT: 3000
      NEXT_PUBLIC_API_BASE_URL: /api
      
      # Spring 配置
      SPRING_PROFILES_ACTIVE: prod
      JPA_DDL_AUTO: update
      SHOW_SQL: false
      
      # 用户配置
      IMAGENTX_ADMIN_EMAIL: admin@imagentx.top
      IMAGENTX_ADMIN_PASSWORD: admin123
      IMAGENTX_ADMIN_NICKNAME: Imagent X管理员
      IMAGENTX_TEST_ENABLED: false
      IMAGENTX_TEST_EMAIL: test@imagentx.top
      IMAGENTX_TEST_PASSWORD: test123
      IMAGENTX_TEST_NICKNAME: 测试用户
      
      # 消息队列配置
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      
      # 安全配置
      JWT_SECRET: please_change_this_in_production
      
      # 日志配置
      LOG_LEVEL_ROOT: warn
      LOG_LEVEL_APP: info
      
      # 文件存储
      FILE_STORAGE_PATH: /app/storage
      
      # 沙箱配置
      SANDBOX_MODE: true
      SANDBOX_MONITORING_ENABLED: true
      
    volumes:
      - storage-data:/app/storage
    ports:
      - "3000:3000"
      - "8088:8088"
    networks:
      - imagentx-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    ulimits:
      nofile:
        soft: 1024
        hard: 2048
    mem_limit: 2g
    cpus: 1.0
    pids_limit: 100
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===== 沙箱监控组件 =====
  
  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.config.file=/etc/prometheus/web.yml'
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./mcp-config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./mcp-config/sandbox-prometheus.yml:/etc/prometheus/sandbox-prometheus.yml:ro
      - ./mcp-config/sandbox-alert-rules.yml:/etc/prometheus/sandbox-alert-rules.yml:ro
      - ./mcp-config/prometheus/web.yml:/etc/prometheus/web.yml:ro
    networks:
      - sandbox-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./mcp-config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - sandbox-network
    depends_on:
      - prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Elasticsearch 日志存储
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sandbox-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=elastic123
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sandbox-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    mem_limit: 1g
    cpus: 0.5

  # Kibana 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sandbox-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic123
    ports:
      - "5601:5601"
    networks:
      - sandbox-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Fluent Bit 日志收集
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: sandbox-fluent-bit
    volumes:
      - ./mcp-config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - sandbox-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # 沙箱安全监控服务
  sandbox-security-monitor:
    image: python:3.11-alpine
    container_name: sandbox-security-monitor
    working_dir: /app
    volumes:
      - ./mcp-config/sandbox-security-monitor.py:/app/sandbox-security-monitor.py:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "pip install prometheus-client requests &&
             python sandbox-security-monitor.py"
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MONITORING_INTERVAL=30
    networks:
      - sandbox-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    mem_limit: 256m
    cpus: 0.25

  # MCP 网关服务（沙箱增强）
  mcp-gateway:
    image: ghcr.io/lucky-aeon/mcp-gateway:latest
    container_name: mcp-gateway
    environment:
      MCP_GATEWAY_API_KEY: imagentx-mcp-key-2024
      MCP_GATEWAY_PORT: 8080
      SANDBOX_MODE: true
    ports:
      - "8080:8080"
    networks:
      - sandbox-network
    depends_on:
      - prometheus
      - grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    mem_limit: 512m
    cpus: 0.5
    pids_limit: 50

  # 沙箱网络隔离代理
  sandbox-proxy:
    image: nginx:alpine
    container_name: sandbox-proxy
    ports:
      - "8082:80"
    volumes:
      - ./mcp-config/nginx-sandbox.conf:/etc/nginx/nginx.conf:ro
    networks:
      - sandbox-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    mem_limit: 128m
    cpus: 0.25

  # 监控API服务 (带认证)
  monitoring-api:
    image: python:3.11-alpine
    container_name: monitoring-api
    working_dir: /app
    volumes:
      - ./mcp-config/monitoring-api-secure.py:/app/monitoring-api.py:ro
    command: >
      sh -c "pip install flask requests prometheus-client &&
             python monitoring-api.py"
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_USER=admin
      - PROMETHEUS_PASS=prometheus123
      - ELASTICSEARCH_USER=elastic
      - ELASTICSEARCH_PASS=elastic123
      - GRAFANA_USER=admin
      - GRAFANA_PASS=admin123
      - API_USERNAME=admin
      - API_PASSWORD=api123
    ports:
      - "5000:5000"
    networks:
      - sandbox-network
    depends_on:
      - prometheus
      - elasticsearch
      - grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    mem_limit: 256m
    cpus: 0.25

  # Nginx反向代理 (带认证)
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "9090:9090"
      - "3001:3001"
      - "9200:9200"
      - "5601:5601"
    volumes:
      - ./mcp-config/nginx/nginx-auth.conf:/etc/nginx/nginx.conf:ro
      - ./mcp-config/nginx/auth/.htpasswd:/etc/nginx/auth/.htpasswd:ro
    networks:
      - sandbox-network
    depends_on:
      - imagentx
      - prometheus
      - grafana
      - elasticsearch
      - kibana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    mem_limit: 128m
    cpus: 0.25
