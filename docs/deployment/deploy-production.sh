#!/bin/bash

# ImagentX Áîü‰∫ßÁéØÂ¢ÉÈÉ®ÁΩ≤ËÑöÊú¨
# ÂüüÂêç: imagentx.top

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo -e "${BLUE}üöÄ ImagentX Áîü‰∫ßÁéØÂ¢ÉÈÉ®ÁΩ≤ËÑöÊú¨${NC}"
    echo "=================================="
    echo -e "${GREEN}Áî®Ê≥ï: ./deploy-production.sh [ÈÄâÈ°π]${NC}"
    echo ""
    echo -e "${CYAN}ÈÉ®ÁΩ≤ÈÄâÈ°π:${NC}"
    echo -e "  ${GREEN}--init${NC}        ÂàùÂßãÂåñÈÉ®ÁΩ≤ÔºàÈ¶ñÊ¨°ÈÉ®ÁΩ≤Ôºâ"
    echo -e "  ${GREEN}--deploy${NC}      ÈÉ®ÁΩ≤ÊúçÂä°"
    echo -e "  ${GREEN}--update${NC}      Êõ¥Êñ∞ÊúçÂä°"
    echo -e "  ${GREEN}--stop${NC}        ÂÅúÊ≠¢ÊúçÂä°"
    echo -e "  ${GREEN}--restart${NC}     ÈáçÂêØÊúçÂä°"
    echo -e "  ${GREEN}--logs${NC}        Êü•ÁúãÊó•Âøó"
    echo -e "  ${GREEN}--status${NC}      Ê£ÄÊü•Áä∂ÊÄÅ"
    echo -e "  ${GREEN}--ssl${NC}         Êõ¥Êñ∞SSLËØÅ‰π¶"
    echo -e "  ${GREEN}--backup${NC}      Â§á‰ªΩÊï∞ÊçÆ"
    echo -e "  ${GREEN}--help${NC}        ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo ""
    echo -e "${CYAN}Á§∫‰æã:${NC}"
    echo -e "  ./deploy-production.sh --init    # ÂàùÂßãÂåñÈÉ®ÁΩ≤"
    echo -e "  ./deploy-production.sh --deploy  # ÈÉ®ÁΩ≤ÊúçÂä°"
    echo -e "  ./deploy-production.sh --status  # Ê£ÄÊü•Áä∂ÊÄÅ"
    echo ""
}

# Ê£ÄÊü•ÁéØÂ¢É
check_environment() {
    echo -e "${BLUE}üìã ÁéØÂ¢ÉÊ£ÄÊü•${NC}"
    echo "--------------------------------"
    
    # Ê£ÄÊü•Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå DockerÊú™ÂÆâË£Ö${NC}"
        exit 1
    fi
    
    # Ê£ÄÊü•Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker ComposeÊú™ÂÆâË£Ö${NC}"
        exit 1
    fi
    
    # Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂
    if [ ! -f ".env.production" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåËØ∑Â§çÂà∂Ê®°ÊùøÂπ∂ÈÖçÁΩÆ${NC}"
        echo -e "${CYAN}cp env.production.template .env.production${NC}"
        echo -e "${CYAN}ÁÑ∂ÂêéÁºñËæë .env.production Êñá‰ª∂${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ ÁéØÂ¢ÉÊ£ÄÊü•ÈÄöËøá${NC}"
}

# ÂàùÂßãÂåñÈÉ®ÁΩ≤
init_deploy() {
    echo -e "${BLUE}üöÄ ÂàùÂßãÂåñÈÉ®ÁΩ≤${NC}"
    echo "--------------------------------"
    
    # Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
    source .env.production
    
    # ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
    mkdir -p logs backups
    
    # ÂÅúÊ≠¢Áé∞ÊúâÊúçÂä°
    docker-compose -f docker-compose-production.yml down 2>/dev/null || true
    
    # ÂêØÂä®Âü∫Á°ÄÊúçÂä°ÔºàÊï∞ÊçÆÂ∫ìÂíåÊ∂àÊÅØÈòüÂàóÔºâ
    echo -e "${CYAN}ÂêØÂä®Âü∫Á°ÄÊúçÂä°...${NC}"
    docker-compose -f docker-compose-production.yml up -d postgres rabbitmq
    
    # Á≠âÂæÖÊúçÂä°ÂêØÂä®
    echo -e "${CYAN}Á≠âÂæÖÊúçÂä°ÂêØÂä®...${NC}"
    sleep 30
    
    # ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
    echo -e "${CYAN}ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì...${NC}"
    docker exec imagentx-postgres-prod psql -U $DB_USER -d $DB_NAME -c "SELECT version();" 2>/dev/null || {
        echo -e "${YELLOW}Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆ${NC}"
        exit 1
    }
    
    echo -e "${GREEN}‚úÖ ÂàùÂßãÂåñÂÆåÊàê${NC}"
}

# ÈÉ®ÁΩ≤ÊúçÂä°
deploy_services() {
    echo -e "${BLUE}üöÄ ÈÉ®ÁΩ≤ÊúçÂä°${NC}"
    echo "--------------------------------"
    
    # Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
    source .env.production
    
    # ÊûÑÂª∫Âπ∂ÂêØÂä®ÊâÄÊúâÊúçÂä°
    echo -e "${CYAN}ÊûÑÂª∫Âπ∂ÂêØÂä®ÊúçÂä°...${NC}"
    docker-compose -f docker-compose-production.yml up -d --build
    
    # Á≠âÂæÖÊúçÂä°ÂêØÂä®
    echo -e "${CYAN}Á≠âÂæÖÊúçÂä°ÂêØÂä®...${NC}"
    sleep 60
    
    # Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
    check_status
    
    echo -e "${GREEN}‚úÖ ÈÉ®ÁΩ≤ÂÆåÊàê${NC}"
}

# Êõ¥Êñ∞ÊúçÂä°
update_services() {
    echo -e "${BLUE}üîÑ Êõ¥Êñ∞ÊúçÂä°${NC}"
    echo "--------------------------------"
    
    # ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å
    echo -e "${CYAN}ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å...${NC}"
    git pull origin main
    
    # ÈáçÊñ∞ÊûÑÂª∫Âπ∂ÂêØÂä®ÊúçÂä°
    deploy_services
}

# ÂÅúÊ≠¢ÊúçÂä°
stop_services() {
    echo -e "${BLUE}üõë ÂÅúÊ≠¢ÊúçÂä°${NC}"
    echo "--------------------------------"
    
    docker-compose -f docker-compose-production.yml down
    echo -e "${GREEN}‚úÖ ÊúçÂä°Â∑≤ÂÅúÊ≠¢${NC}"
}

# ÈáçÂêØÊúçÂä°
restart_services() {
    echo -e "${BLUE}üîÑ ÈáçÂêØÊúçÂä°${NC}"
    echo "--------------------------------"
    
    docker-compose -f docker-compose-production.yml restart
    echo -e "${GREEN}‚úÖ ÊúçÂä°Â∑≤ÈáçÂêØ${NC}"
}

# Êü•ÁúãÊó•Âøó
show_logs() {
    echo -e "${BLUE}üìã Êü•ÁúãÊó•Âøó${NC}"
    echo "--------------------------------"
    
    echo -e "${CYAN}ÈÄâÊã©Ë¶ÅÊü•ÁúãÁöÑÊúçÂä°:${NC}"
    echo "1) ÂêéÁ´ØÊúçÂä°"
    echo "2) ÂâçÁ´ØÊúçÂä°"
    echo "3) Nginx"
    echo "4) Êï∞ÊçÆÂ∫ì"
    echo "5) RabbitMQ"
    echo "6) ÊâÄÊúâÊúçÂä°"
    
    read -p "ËØ∑ÈÄâÊã© (1-6): " choice
    
    case $choice in
        1) docker-compose -f docker-compose-production.yml logs -f imagentx-backend-prod ;;
        2) docker-compose -f docker-compose-production.yml logs -f imagentx-frontend-prod ;;
        3) docker-compose -f docker-compose-production.yml logs -f imagentx-nginx-prod ;;
        4) docker-compose -f docker-compose-production.yml logs -f imagentx-postgres-prod ;;
        5) docker-compose -f docker-compose-production.yml logs -f imagentx-rabbitmq-prod ;;
        6) docker-compose -f docker-compose-production.yml logs -f ;;
        *) echo -e "${RED}Êó†ÊïàÈÄâÊã©${NC}" ;;
    esac
}

# Ê£ÄÊü•Áä∂ÊÄÅ
check_status() {
    echo -e "${BLUE}üìä ÊúçÂä°Áä∂ÊÄÅÊ£ÄÊü•${NC}"
    echo "--------------------------------"
    
    # Ê£ÄÊü•ÂÆπÂô®Áä∂ÊÄÅ
    echo -e "${CYAN}ÂÆπÂô®Áä∂ÊÄÅ:${NC}"
    docker-compose -f docker-compose-production.yml ps
    
    echo ""
    
    # Ê£ÄÊü•Á´ØÂè£
    echo -e "${CYAN}Á´ØÂè£Ê£ÄÊü•:${NC}"
    netstat -tlnp 2>/dev/null | grep -E ":(80|443|3000|8088)" || echo "Á´ØÂè£Ê£ÄÊü•Â§±Ë¥•"
    
    echo ""
    
    # Ê£ÄÊü•ÂÅ•Â∫∑Áä∂ÊÄÅ
    echo -e "${CYAN}ÂÅ•Â∫∑Ê£ÄÊü•:${NC}"
    curl -s https://imagentx.top/health 2>/dev/null && echo "‚úÖ ÂâçÁ´ØÂÅ•Â∫∑" || echo "‚ùå ÂâçÁ´Ø‰∏çÂÅ•Â∫∑"
    curl -s https://imagentx.top/api/health 2>/dev/null && echo "‚úÖ ÂêéÁ´ØÂÅ•Â∫∑" || echo "‚ùå ÂêéÁ´Ø‰∏çÂÅ•Â∫∑"
}

# Êõ¥Êñ∞SSLËØÅ‰π¶
update_ssl() {
    echo -e "${BLUE}üîí Êõ¥Êñ∞SSLËØÅ‰π¶${NC}"
    echo "--------------------------------"
    
    # ËøêË°åcertbotÊõ¥Êñ∞ËØÅ‰π¶
    docker-compose -f docker-compose-production.yml run --rm certbot renew
    
    # ÈáçÂêØnginx
    docker-compose -f docker-compose-production.yml restart nginx
    
    echo -e "${GREEN}‚úÖ SSLËØÅ‰π¶Â∑≤Êõ¥Êñ∞${NC}"
}

# Â§á‰ªΩÊï∞ÊçÆ
backup_data() {
    echo -e "${BLUE}üíæ Â§á‰ªΩÊï∞ÊçÆ${NC}"
    echo "--------------------------------"
    
    # ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
    mkdir -p backups/$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
    
    # Â§á‰ªΩÊï∞ÊçÆÂ∫ì
    echo -e "${CYAN}Â§á‰ªΩÊï∞ÊçÆÂ∫ì...${NC}"
    docker exec imagentx-postgres-prod pg_dump -U $DB_USER $DB_NAME > $BACKUP_DIR/database.sql
    
    # Â§á‰ªΩÂ≠òÂÇ®Êñá‰ª∂
    echo -e "${CYAN}Â§á‰ªΩÂ≠òÂÇ®Êñá‰ª∂...${NC}"
    docker cp imagentx-backend-prod:/app/storage $BACKUP_DIR/
    
    # ÂéãÁº©Â§á‰ªΩ
    tar -czf $BACKUP_DIR.tar.gz $BACKUP_DIR
    rm -rf $BACKUP_DIR
    
    echo -e "${GREEN}‚úÖ Â§á‰ªΩÂÆåÊàê: $BACKUP_DIR.tar.gz${NC}"
}

# ‰∏ªÂáΩÊï∞
main() {
    case "${1:-}" in
        --init)
            check_environment
            init_deploy
            ;;
        --deploy)
            check_environment
            deploy_services
            ;;
        --update)
            check_environment
            update_services
            ;;
        --stop)
            stop_services
            ;;
        --restart)
            restart_services
            ;;
        --logs)
            show_logs
            ;;
        --status)
            check_status
            ;;
        --ssl)
            update_ssl
            ;;
        --backup)
            backup_data
            ;;
        --help|*)
            show_help
            ;;
    esac
}

# ËøêË°å‰∏ªÂáΩÊï∞
main "$@"
